Dummy API
https://www.mockaroo.com/
https://jsonplaceholder.typicode.com/
https://fakestoreapi.com/docs#user


dpp7uvz8ubya

{
  "name": "VoximplantDemo",
  "version": "0.0.1",
  "private": true,
  "scripts": {
    "android": "react-native run-android",
    "ios": "react-native run-ios",
    "start": "react-native start",
    "test": "jest",
    "lint": "eslint ."
  },
  "dependencies": {
    "@react-native-async-storage/async-storage": "^1.15.14",
    "@react-native-community/datetimepicker": "^5.1.0",
    "@react-native-community/masked-view": "0.1.11",
    "@react-native-firebase/app": "^14.4.0",
    "@react-native-firebase/auth": "^14.4.0",
    "@react-native-firebase/firestore": "^14.4.0",
    "@react-native-firebase/storage": "^14.5.0",
    "@react-native-google-signin/google-signin": "^7.0.4",
    "@react-native-picker/picker": "^2.3.1",
    "@react-navigation/compat": "^5.1.25",
    "@react-navigation/drawer": "5.12.4",
    "@react-navigation/native": "5.9.4",
    "@react-navigation/stack": "5.14.5",
    "@voximplant/react-native-foreground-service": "2.0.0",
    "galio-framework": "^0.8.0",
    "prop-types": "^15.8.1",
    "react": "17.0.2",
    "react-native": "0.66.3",
    "react-native-callkeep": "4.2.0",
    "react-native-dotenv": "^3.3.1",
    "react-native-eject": "^0.1.2",
    "react-native-geolocation-service": "^5.3.0-beta.4",
    "react-native-gesture-handler": "1.10.3",
    "react-native-get-random-values": "1.7.0",
    "react-native-google-places-autocomplete": "^2.4.1",
    "react-native-image-picker": "^4.7.3",
    "react-native-intl": "^1.0.0",
    "react-native-maps": "^0.30.1",
    "react-native-maps-directions": "^1.8.0",
    "react-native-md5": "1.0.0",
    "react-native-modal-datetime-picker": "^13.0.1",
    "react-native-modal-dropdown": "^1.0.2",
    "react-native-payfast-gateway": "^1.0.0",
    "react-native-reanimated": "2.2.3",
    "react-native-safe-area-context": "3.2.0",
    "react-native-screens": "3.4.0",
    "react-native-snap-carousel": "^3.9.1",
    "react-native-vector-icons": "^8.1.0",
    "react-native-voip-push-notification": "3.3.0",
    "react-native-voximplant": "1.27.1",
    "react-native-webview": "^11.17.2",
    "react-redux": "^7.2.6",
    "redux": "^4.1.2",
    "redux-logger": "^3.0.6",
    "redux-persist": "^6.0.0",
    "redux-thunk": "^2.4.1",
    "reselect": "^4.1.5",
    "styled-components": "^5.3.3",
    "uuid": "8.3.2"
  },
  "devDependencies": {
    "@babel/core": "^7.12.9",
    "@babel/runtime": "^7.12.5",
    "@react-native-community/cli": "^7.0.1",
    "@react-native-community/eslint-config": "^2.0.0",
    "babel-jest": "^26.6.3",
    "eslint": "7.14.0",
    "jest": "^26.6.3",
    "metro-react-native-babel-preset": "^0.66.2",
    "react-test-renderer": "17.0.2"
  },
  "jest": {
    "preset": "react-native"
  }
}


npm install @react-native-community/cameraroll @react-native-community/netinfo @stream-io/flat-list-mvcp react-native-document-picker react-native-fs react-native-gesture-handler react-native-haptic-feedback react-native-haptic-feedback react-native-image-crop-picker react-native-image-resizer react-native-reanimated react-native-safe-area-context react-native-share react-native-svg



import React from "react";
import { withNavigation } from "@react-navigation/compat";
import PropTypes from "prop-types";
import {
  StyleSheet,
  Image,
  TouchableWithoutFeedback,
  Dimensions,
  TouchableOpacity,
} from "react-native";
import { Block, Text, theme, Button } from "galio-framework";
import { nowTheme } from "../../constants";
import { Images } from "../../constants";
import ImageView from "react-native-image-viewing";

//redux
import { connect } from "react-redux";
import { createStructuredSelector } from "reselect";
import {
  appointmentConnect,
  updateAppointmentRecord,
  addAppointmentRecords,
} from "../../redux/user/user-actions";
import { selectAppointmentRecords } from "../../redux/user/user-selectors";
import Appointments from "../../constants/Appointments.json";
import CallButton from "../../components/CallButton";
import COLOR from "../../styles/Color";
const { width, height } = Dimensions.get("screen");
const thumbMeasure = (width - 48 - 32) / 3.75;

const Appointment = Appointments.icons;

class AppointmentCard extends React.Component {
  state = {
    paymentStatus: false,
    showImage: false,
  };
  constructor(props) {
    super(props);
  }

  _appointmentConnect = () => {
    const { appointmentConnect, item } = this.props;
    const connectDetails = {
      loginCredentials: {
        username: "user2@call-test.tkaydelvin",
        password: "!234User2",
      },
      patientDetails: item,
    };
    appointmentConnect(connectDetails);
  };

  handleShowImage(status) {
    this.setState({ showImage: !status });
  }

  right = (str, chr) => {
    return str.slice(str.length - chr, str.length);
  };

  render() {
    const {
      navigation,
      item,
      full,
      style,
      ctaColor,
      imageStyle,
      ctaRight,
      titleStyle,
      horizontal,
      appointmentRecords,
      updateAppointmentRecord,
      addAppointmentRecords,
    } = this.props;

    const imageStyles = [
      full ? styles.fullImage : styles.horizontalImage,
      imageStyle,
    ];
    const titleStyles = [styles.cardTitle];
    const cardContainer = [styles.card, styles.shadow, style];
    const imgContainer = [
      styles.imageContainer,
      horizontal ? styles.horizontalStyles : styles.verticalStyles,
      styles.shadow,
    ];

    const Start = {
      StartTime: Date.now(),
      Status: "In Progress",
    };
    const End = {
      EndTime: Date.now(),
      Status: "Complete",
    };

    console.log(item);

    const images = [
      {
        uri: item.ServiceProviderImageUrl.replace(
          "https://firebasestorage.googleapis.com/v0/b/",
          "https://ik.imagekit.io/qlvke6f9z/tr:w-h-300,w-400/v0/b/",
        ),
      },
    ];

    const toCut = this.right(
      new Date(item.DateTime)
        .toString(),
      12,
    );

    return (
      <Block>
        {item.AppointmentType == "Physical"
          ? (
            <Block card flex style={cardContainer}>
              <Block row={horizontal}>
                <TouchableWithoutFeedback>
                  <Block flex space="between" style={styles.cardDescription}>
                    <Block>
                      <Text
                        //style={}
                        size={14}
                        style={styles.appointment}
                        color={nowTheme.COLORS.SECONDARY}
                      >
                        {new Date(item.DateTime)
                          .toString()
                          .replace(toCut, "")}
                      </Text>

                      <Text
                        style={{ fontFamily: "montserrat-regular" }}
                        size={14}
                        style={titleStyles}
                        color={nowTheme.COLORS.SECONDARY}
                      >
                        Gender : {item.Gender}
                      </Text>
                      <Text
                        style={{ fontFamily: "montserrat-regular" }}
                        size={14}
                        style={titleStyles}
                        color={nowTheme.COLORS.SECONDARY}
                      >
                        Status : {item.VisitationStatus}
                      </Text>
                      <Text
                        style={{ fontFamily: "montserrat-regular" }}
                        size={14}
                        style={titleStyles}
                        color={nowTheme.COLORS.SECONDARY}
                      >
                        Appointment for :
                      </Text>
                    </Block>
                  </Block>
                </TouchableWithoutFeedback>
                <TouchableWithoutFeedback>
                  <Block flex space="between" style={styles.cardDescription}>
                    <Block middle>
                      <TouchableOpacity
                        onPress={() => this.setState({ showImage: true })}
                      >
                        <Image
                          source={{
                            uri: item.ServiceProviderImageUrl.replace(
                              "https://firebasestorage.googleapis.com/v0/b/",
                              "https://ik.imagekit.io/qlvke6f9z/tr:w-h-300,w-400/v0/b/",
                            ),
                          }}
                          style={styles.avatar}
                        />
                      </TouchableOpacity>
                    </Block>
                  </Block>
                </TouchableWithoutFeedback>
              </Block>
              <Block
                row
                middle
                style={{
                  marginTop: theme.SIZES.BASE * 2.5,
                  marginBottom: theme.SIZES.BASE * 1,
                }}
              >
                <Block row={horizontal} style={{ marginTop: -25 }}>
                  <Block flex space="between" style={styles.cardDescription}>
                    <Block middle style={{ marginTop: -15 }}>
                      <Text
                        size={14}
                        style={styles.appointment}
                        color={nowTheme.COLORS.SECONDARY}
                      >
                        {item.Name}
                      </Text>
                    </Block>
                  </Block>
                  <Block flex space="between" style={styles.cardDescription}>
                    <Block middle>
                      {Date.now() < new Date(item.DateTime) &&
                        item.VisitationStatus === "Pending"
                        ? (
                          <Button
                            shadowless
                            style={styles.button}
                            color={nowTheme.COLORS.PRIMARY}
                            onPress={() => {
                              updateAppointmentRecord(
                                Start,
                                item,
                                appointmentRecords,
                              );
                            }}
                          >
                            <Text
                              style={{
                                fontFamily: "montserrat-bold",
                                fontSize: 14,
                              }}
                              color={theme.COLORS.WHITE}
                            >
                              START APPOINTMENT
                            </Text>
                          </Button>
                        )
                        : Date.now() > new Date(item.DateTime) &&
                          item.VisitationStatus === "Pending"
                        ? (
                          <Button
                            shadowless
                            style={styles.button}
                            color={nowTheme.COLORS.PRIMARY}
                            onPress={() =>
                              addAppointmentRecords(
                                Appointment,
                                appointmentRecords,
                              )}
                          >
                            <Text
                              style={{
                                fontFamily: "montserrat-bold",
                                fontSize: 14,
                              }}
                              color={theme.COLORS.WHITE}
                            >
                              APPOINTMENT OVERDUE
                            </Text>
                          </Button>
                        )
                        : Date.now() > new Date(item.DateTime) &&
                          item.VisitationStatus === "Completed"
                        ? (
                          <Button
                            shadowless
                            style={styles.button}
                            color={nowTheme.COLORS.PRIMARY}
                            onPress={() =>
                              navigation.navigate("MedicalRecords", {
                                details: {
                                  patientDetails: item,
                                  option: "new",
                                },
                              })}
                          >
                            <Text
                              style={{
                                fontFamily: "montserrat-bold",
                                fontSize: 14,
                              }}
                              color={theme.COLORS.WHITE}
                            >
                              ADD PRESCRIPTION
                            </Text>
                          </Button>
                        )
                        : item.VisitationStatus === "In Progress"
                        ? (
                          <Button
                            shadowless
                            style={styles.button}
                            color={nowTheme.COLORS.PRIMARY}
                            onPress={() => {
                              updateAppointmentRecord(
                                End,
                                item,
                                appointmentRecords,
                              );
                            }}
                          >
                            <Text
                              style={{
                                fontFamily: "montserrat-bold",
                                fontSize: 14,
                              }}
                              color={theme.COLORS.WHITE}
                            >
                              END APPOINTMENT
                            </Text>
                          </Button>
                        )
                        : null}
                    </Block>
                  </Block>
                </Block>
              </Block>
            </Block>
          )
          : item.AppointmentType == "Virtual"
          ? (
            <Block card flex style={cardContainer}>
              <Block row={horizontal}>
                <TouchableWithoutFeedback>
                  <Block flex space="between" style={styles.cardDescription}>
                    <Block>
                      <Text
                        //style={}
                        size={14}
                        style={styles.appointment}
                        color={nowTheme.COLORS.SECONDARY}
                      >
                        {new Date(item.DateTime)
                          .toString()
                          .replace(toCut, "")}
                      </Text>
                      <Text
                        style={{ fontFamily: "montserrat-regular" }}
                        size={14}
                        style={titleStyles}
                        color={nowTheme.COLORS.SECONDARY}
                      >
                        <Text style={styles.appointment}>Status :</Text>
                        {" " + item.VisitationStatus}
                      </Text>
                      <Text
                        style={{ fontFamily: "montserrat-regular" }}
                        size={14}
                        style={titleStyles}
                        color={nowTheme.COLORS.SECONDARY}
                      >
                        <Text style={styles.appointment}>Patient :</Text>
                        {" " + item.Name}
                      </Text>
                    </Block>
                  </Block>
                </TouchableWithoutFeedback>
                <TouchableWithoutFeedback>
                  <Block flex space="between" style={styles.cardDescription}>
                    <Block middle>
                      <TouchableOpacity
                        onPress={() => this.setState({ showImage: true })}
                      >
                        <Image
                          source={{
                            uri: item.ServiceProviderImageUrl.replace(
                              "https://firebasestorage.googleapis.com/v0/b/",
                              "https://ik.imagekit.io/qlvke6f9z/tr:w-h-300,w-400/v0/b/",
                            ),
                          }}
                          style={styles.avatar}
                        />
                      </TouchableOpacity>
                    </Block>
                  </Block>
                </TouchableWithoutFeedback>
              </Block>
              <Block
                row
                middle
                style={{
                  marginTop: theme.SIZES.BASE * 2.5,
                  marginBottom: theme.SIZES.BASE * 1,
                }}
              >
                <Block row={horizontal} style={{ marginTop: -25 }}>
                  <Block flex space="between" style={styles.cardDescription}>
                    <Block middle>
                      {Date.now() < new Date(item.DateTime) &&
                        item.VisitationStatus === "Pending"
                        ? (
                          <Block
                            row={horizontal}
                            style={{ marginTop: -40, marginBottom: -20 }}
                          >
                            <CallButton
                              icon_name="message"
                              color={COLOR.ACCENT}
                              buttonPressed={() => {
                                this.props.navigation.navigate("Messaging");
                                this._appointmentConnect();
                              }}
                            />
                            <CallButton
                              icon_name="call"
                              color={COLOR.ACCENT}
                              buttonPressed={() => this.makeCall(false)}
                            />
                          </Block>
                        )
                        : Date.now() > new Date(item.DateTime) &&
                          item.VisitationStatus === "Pending"
                        ? (
                          <Button
                            shadowless
                            style={styles.button}
                            color={nowTheme.COLORS.PRIMARY}
                            onPress={() =>
                              addAppointmentRecords(
                                Appointment,
                                appointmentRecords,
                              )}
                          >
                            <Text
                              style={{
                                fontFamily: "montserrat-bold",
                                fontSize: 14,
                              }}
                              color={theme.COLORS.WHITE}
                            >
                              APPOINTMENT OVERDUE
                            </Text>
                          </Button>
                        )
                        : Date.now() > new Date(item.DateTime) &&
                          item.VisitationStatus === "Completed"
                        ? (
                          <Button
                            shadowless
                            style={styles.button}
                            color={nowTheme.COLORS.PRIMARY}
                            onPress={() =>
                              navigation.navigate("MedicalRecords", {
                                details: {
                                  patientDetails: item,
                                  option: "new",
                                },
                              })}
                          >
                            <Text
                              style={{
                                fontFamily: "montserrat-bold",
                                fontSize: 14,
                              }}
                              color={theme.COLORS.WHITE}
                            >
                              ADD PRESCRIPTION
                            </Text>
                          </Button>
                        )
                        : null}
                    </Block>
                  </Block>
                </Block>
              </Block>
            </Block>
          )
          : null}
        <ImageView
          images={images}
          imageIndex={0}
          visible={this.state.showImage}
          onRequestClose={() => this.handleShowImage(this.state.showImage)}
        />
      </Block>
    );
  }
}

const mapDispatchToProps = (dispatch) => ({
  appointmentConnect: (connectDetails) =>
    dispatch(appointmentConnect(connectDetails)),
  updateAppointmentRecord: (toUpdate, record, records) =>
    dispatch(updateAppointmentRecord(toUpdate, record, records)),
  addAppointmentRecords: (items, appointmentRecords) =>
    dispatch(addAppointmentRecords(items, appointmentRecords)),
});
const mapStateToProps = createStructuredSelector({
  appointmentRecords: selectAppointmentRecords,
});
AppointmentCard.propTypes = {
  item: PropTypes.object,
  horizontal: PropTypes.bool,
  full: PropTypes.bool,
  ctaColor: PropTypes.string,
  imageStyle: PropTypes.any,
  ctaRight: PropTypes.bool,
  titleStyle: PropTypes.any,
  textBodyStyle: PropTypes.any,
};

const styles = StyleSheet.create({
  card: {
    backgroundColor: theme.COLORS.WHITE,
    marginVertical: theme.SIZES.BASE,
    borderWidth: 0,
    minHeight: 114,
    marginBottom: 4,
  },
  cardTitle: {
    paddingHorizontal: 9,
    paddingTop: 2,
    paddingBottom: 2,
  },
  cardDescription: {
    padding: theme.SIZES.BASE / 2,
    //paddingBottom: -10,
  },
  imageContainer: {
    borderRadius: 3,
    elevation: 1,
    overflow: "hidden",
  },
  image: {
    // borderRadius: 3,
  },
  horizontalImage: {
    height: 122,
    width: "auto",
  },
  horizontalStyles: {
    borderTopRightRadius: 0,
    borderBottomRightRadius: 0,
  },
  verticalStyles: {
    borderBottomRightRadius: 0,
    borderBottomLeftRadius: 0,
  },
  fullImage: {
    height: 300,
    width: "auto",
  },
  shadow: {
    shadowColor: "#8898AA",
    shadowOffset: { width: 0, height: 1 },
    shadowRadius: 6,
    shadowOpacity: 0.1,
    elevation: 2,
  },
  articleButton: {
    fontFamily: "montserrat-bold",
    paddingHorizontal: 9,
    paddingVertical: 7,
  },
  createButtonOptions: {
    width: width * 0.275,
  },
  createButton: {
    width: width * 0.5,
  },
  button: {
    position: "absolute",
    width: width - theme.SIZES.BASE * 15,
    height: theme.SIZES.BASE * 3,
    shadowRadius: 0,
    shadowOpacity: 0,
  },
  avatarContainer: {
    position: "relative",
    marginTop: -80,
  },
  avatar: {
    width: thumbMeasure,
    height: thumbMeasure,
    borderRadius: 50,
    borderWidth: 0,
  },
  appointment: {
    fontWeight: "900",
    paddingHorizontal: 9,
    paddingTop: 2,
    paddingBottom: 2,
  },
});

export default withNavigation(
  connect(mapStateToProps, mapDispatchToProps)(AppointmentCard),
);

//export default withNavigation(AppointmentCard);

/*              <Block flex>
                <Text
                  style={{fontFamily: 'montserrat-regular'}}
                  size={14}
                  style={titleStyles}
                  color={nowTheme.COLORS.SECONDARY}>
                  {item.AppointmentType}
                </Text>
              </Block>
              
              
              
                               <Button
                            shadowless
                            style={styles.button}
                            color={nowTheme.COLORS.PRIMARY}
                            onPress={() => {
                              navigation.navigate("Login");
                              this._appointmentConnect(item);
                            }}
                          >
                            <Text
                              style={{
                                fontFamily: "montserrat-bold",
                                fontSize: 14,
                              }}
                              color={theme.COLORS.WHITE}
                            >
                              CONNECT...
                            </Text>
                          </Button>         
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              */
